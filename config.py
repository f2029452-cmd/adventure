import pygame
from csv import reader
import os
from os import walk

# TOP_DIR = os.path.dirname(__file__)

pygame.init()

WIDTH = 1280
HEIGHT = 725 # 800 original
FPS = 30
TILESIZE = 64
TILESIZE_LARGE = 128

display_surface = pygame.display.set_mode((WIDTH, HEIGHT))

PLAYER_LAYER = 9
ENEMY_LAYER = 8
DOOR_LAYER = 7
BLOCK_LAYER = 6
BUILDING_LAYER = 5
FOREST_LAYER_3 = 4
FOREST_LAYER_2 = 3
FOREST_LAYER_1 = 2
GROUND_LAYER = 1

PLAYER_SPEED = 10
BLUE_FIRE_ENEMY_SPEED = 4

ANIMATION_ITERATION = 0.2

DURABILITY = 75

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)
LIGHT_BLUE = (0, 125, 255)
BLUE = (0, 0, 255)
DEEP_PINK = (255,20,147)
PINK = (178, 0, 255)
INDIGO = (75, 0, 130)
VIOLET = (148, 0, 211)
LIGHT_GREY = (211,211,211)
SILVER = (192,192,192)
GREY = (128,128,128)
GOLD = (255, 215, 0)
WATER_COLOR = (113, 221, 238)
UI_BG_COLOR = (34, 34, 34)
UI_BORDER_COLOR = (17, 17, 17)
TEXT_COLOR = (238, 238, 238)

BAR_HEIGHT = 20
BAR_WIDTH = 200
ENERGY_BAR_WIDTH = 140
ITEM_BOX_SIZE = 80
UI_FONT = 'fonts/JetBrainsMono-Medium.ttf'
UI_FONT_SIZE = 18

HEALTH_COLOR = RED
ENERGY_COLOR = BLUE
UI_BORDER_COLOR_ACTIVE = GOLD

FONT = pygame.font.Font('fonts/JetBrainsMono-Medium.ttf', 32)
SMALL_FONT = pygame.font.Font('fonts/JetBrainsMono-Medium.ttf', 16)

INTRO_BG_IMAGE = pygame.image.load("img/introbackground.webp")
OUTRO_BG_IMAGE = pygame.image.load("img/outrobackground.webp")
LOAD_BG_IMAGE = pygame.image.load("img/loadbackground.webp")
LOGO_IMAGE = pygame.image.load('img/logo.png')

GOLD_COIN_IMAGE = pygame.image.load('Treasure/GoldCoin.png').convert_alpha()
GOLD_CUP_IMAGE = pygame.image.load('Treasure/GoldCup.png').convert_alpha()
GOLD_KEY_IMAGE = pygame.image.load('Treasure/GoldKey.png').convert_alpha()
SILVER_COIN_IMAGE = pygame.image.load('Treasure/SilverCoin.png').convert_alpha()
SILVER_CUP_IMAGE = pygame.image.load('Treasure/SilverCup.png').convert_alpha()
SILVER_KEY_IMAGE = pygame.image.load('Treasure/SilverKey.png').convert_alpha()

LITTLE_TREASURE_CHEST_IMAGE = pygame.image.load('Treasure/LittleTreasureChest.png').convert_alpha()
BIG_TREASURE_CHEST_IMAGE = pygame.image.load('Treasure/BigTreasureChest.png').convert_alpha()

BEEF_IMAGE = pygame.image.load('Food/Beaf.png').convert_alpha()
CALAMARI_IMAGE = pygame.image.load('Food/Calamari.png').convert_alpha()
FISH_IMAGE = pygame.image.load('Food/Fish.png').convert_alpha()
NOODLE_IMAGE = pygame.image.load('Food/Noodle.png').convert_alpha()
HONEY_IMAGE = pygame.image.load('Food/Honey.png').convert_alpha()
SHRIMP_IMAGE = pygame.image.load('Food/Shrimp.png').convert_alpha()
SUSHI_IMAGE = pygame.image.load('Food/Sushi.png').convert_alpha()
SUSHI_IMAGE_2 = pygame.image.load('Food/Sushi2.png').convert_alpha()
YAKITORI_IMAGE = pygame.image.load('Food/Yakitori.png').convert_alpha()

POTION_MAKER = pygame.image.load('img/dd.png').convert_alpha()

AXE_UP = pygame.image.load('level_graphics/graphics/weapons/axe/up.png').convert_alpha()
AXE_DOWN = pygame.image.load('level_graphics/graphics/weapons/axe/down.png').convert_alpha()
AXE_LEFT = pygame.image.load('level_graphics/graphics/weapons/axe/left.png').convert_alpha()
AXE_RIGHT = pygame.image.load('level_graphics/graphics/weapons/axe/right.png').convert_alpha()
LANCE_UP = pygame.image.load('level_graphics/graphics/weapons/lance/up.png').convert_alpha()
LANCE_DOWN = pygame.image.load('level_graphics/graphics/weapons/lance/down.png').convert_alpha()
LANCE_LEFT = pygame.image.load('level_graphics/graphics/weapons/lance/left.png').convert_alpha()
LANCE_RIGHT = pygame.image.load('level_graphics/graphics/weapons/lance/right.png').convert_alpha()
RAPIER_UP = pygame.image.load('level_graphics/graphics/weapons/rapier/up.png').convert_alpha()
RAPIER_DOWN = pygame.image.load('level_graphics/graphics/weapons/rapier/down.png').convert_alpha()
RAPIER_LEFT = pygame.image.load('level_graphics/graphics/weapons/rapier/left.png').convert_alpha()
RAPIER_RIGHT = pygame.image.load('level_graphics/graphics/weapons/rapier/right.png').convert_alpha()
SAI_UP = pygame.image.load('level_graphics/graphics/weapons/sai/up.png').convert_alpha()
SAI_DOWN = pygame.image.load('level_graphics/graphics/weapons/sai/down.png').convert_alpha()
SAI_LEFT = pygame.image.load('level_graphics/graphics/weapons/sai/left.png').convert_alpha()
SAI_RIGHT = pygame.image.load('level_graphics/graphics/weapons/sai/right.png').convert_alpha()
SWORD_UP = pygame.image.load('level_graphics/graphics/weapons/sword/up.png').convert_alpha()
SWORD_DOWN = pygame.image.load('level_graphics/graphics/weapons/sword/down.png').convert_alpha()
SWORD_LEFT = pygame.image.load('level_graphics/graphics/weapons/sword/left.png').convert_alpha()
SWORD_RIGHT = pygame.image.load('level_graphics/graphics/weapons/sword/right.png').convert_alpha()

AXE_FULL = pygame.image.load('level_graphics/graphics/weapons/axe/full.png').convert_alpha()
LANCE_FULL = pygame.image.load('level_graphics/graphics/weapons/lance/full.png').convert_alpha()
RAPIER_FULL = pygame.image.load('level_graphics/graphics/weapons/rapier/full.png').convert_alpha()
SAI_FULL = pygame.image.load('level_graphics/graphics/weapons/sai/full.png').convert_alpha()
SWORD_FULL = pygame.image.load('level_graphics/graphics/weapons/sword/full.png').convert_alpha()

BACKGROUND = pygame.image.load('img/background.png').convert_alpha()

def import_csv_layout(path):
    terrain_map = []
    with open(path) as level_map:
        layout = reader(level_map, delimiter = ',')
        for row in layout:
            terrain_map.append(list(row))
        return terrain_map


WORLD_MAP = [
[+0,+0,+0,+0,+0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-2,-4,11,+0,+0,+0,80,+0,80,+0,81,+0,28,28,28,28,28,28,13,+0,+0,+0,70,15,+0,+0,28,28,28,28,28,28,28,75,75,+0,+0,+0,29,29,94,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,-9,+0,53,+0,+0,+0,+0,+0,+0,+0,+0,28,78,79,79,78,28,+0,54,+0,+0,70,+0,54,+0,59,+0,+0,+0,+0,33,28,75,75,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,-9,+0,50,+0,+0,+4,+0,+0,+0,+0,+0,28,77,+0,+0,77,28,+0,52,+0,+0,70,+0,50,+0,+0,+0,+0,+0,+0,+0,28,75,75,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,-9,76,+0,+0,+0,+4,+0,+0,+0,+0,+0,28,+0,+0,+0,+0,28,76,+0,+0,+0,70,28,+0,+0,+0,+0,28,28,28,28,28,75,75,+0,+0,+0,29,29,29,29,29,29,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,+9,-6,+6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-4,22,+0,+0,89,75,75,+0,+0,+0,29,29,29,29,29,29,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,10,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,+8,-9,+0,+0,+0,89,75,75,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,-9,12,+0,55,+0,11,+0,+0,+0,+0,+0,+0,10,-7,-7,+8,+0,+0,+0,20,+0,+0,+0,21,+0,+0,-8,-9,+0,+0,+0,89,75,75,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,-9,+0,+0,+0,+0,+0,57,+0,+0,+0,+0,26,-9,30,30,-8,26,+0,+0,+0,+0,+0,+0,+0,+0,+0,-8,-9,27,27,27,27,75,75,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,-9,+0,50,+0,+0,+0,52,+0,+0,+0,10,-7,30,-1,-1,30,-7,+8,+0,+0,+0,+0,+0,+0,51,+0,-8,-9,27,89,85,+0,75,75,+0,+0,+0,29,29,29,29,29,29,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,+9,-6,-6,-6,-6,-6,-6,-6,-6,-4,-9,30,-1,39,-1,-1,30,-8,-2,-6,-6,-6,-6,-6,-6,-6,+7,-9,27,89,+0,+0,75,75,+0,+0,+0,29,29,29,29,29,29,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,10,-7,-7,-7,-7,-7,-7,-7,-7,-5,-9,30,-1,-1,-1,-1,30,-8,-3,-7,-7,-7,-7,-7,-7,-7,+8,-9,27,+0,+0,+0,75,75,+0,+0,+0,29,29,94,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,-9,17,+0,+0,+0,13,+0,+0,+0,+0,+9,-6,30,-1,-1,30,-6,+7,+0,16,+0,+0,14,+0,+0,+0,-8,-9,27,27,27,27,75,75,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,-9,+0,+0,+0,+0,+0,53,+0,+0,+0,+0,26,-9,30,30,-8,26,+0,+0,+0,+0,+0,+0,56,+0,+0,-8,-9,27,86,83,+0,75,75,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,-9,+0,+0,+0,+0,+0,52,+0,+0,68,70,+0,+9,-6,-6,+7,+0,+0,70,+0,+0,+0,+0,52,+0,+0,-8,-9,27,86,+0,+0,75,75,+0,+0,+0,29,29,29,29,29,29,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,-9,+0,50,+0,+0,28,+0,+0,28,68,68,+0,-8,26,26,-9,+0,+0,71,65,+0,32,+0,+0,58,+0,-8,-9,27,27,27,27,75,75,+0,+0,+0,29,29,29,29,29,29,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,-9,87,+0,+0,+0,28,+0,+0,28,72,68,+0,-8,26,26,-9,+0,+0,72,59,+0,+0,+0,+0,+0,+0,-8,-9,27,+0,84,+0,75,75,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-8,+9,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,+7,26,26,+9,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,+7,-9,27,31,+0,+0,75,75,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,-3,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,+8,26,26,10,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-5,90,+0,91,+0,75,75,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,34,-8,26,26,-9,26,75,75,75,75,75,75,75,75,75,75,75,+0,+0,+0,+0,75,75,+0,+0,+0,29,29,29,29,29,29,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,+0,+0,+0,+0,+0,+0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,+0,+0,+0,29,29,29,29,29,29,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,75,+0,+0,+0,+0,+0,+0,75,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,94,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,75,+0,+0,+0,+0,+0,+0,75,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,37,+0,+0,+0,+0,+0,+0,37,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,29,29,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,+0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,+0,+0,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0],
[+0,+0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[29,29,29,29,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,29,29,29,29,+0,+0,+0,29,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[29,29,29,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,29,29,29,29,29,29,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[82,+0,+0,82,+0,+0,82,+0,+0,29,29,24,24,24,24,82,+0,+0,82,+0,+0,82,+0,+0,29,29,+0,+0,+0,+0,82,+0,+0,82,+0,+0,+0,+0,+0,29,29,29,29,29,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,25,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,11,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,94,+0,+0,+0,+0,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,25,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0,+0],
[82,+0,+0,82,+0,+0,82,+0,+0,+0,+0,+0,+0,+0,25,82,+0,+0,82,+0,+0,82,+0,+0,29,29,+0,+0,+0,+0,82,+0,+0,82,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,95,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,25,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,29,29,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,25,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,12,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[82,+0,+0,82,+0,+0,82,+0,+0,+0,11,+0,+0,+0,25,82,+0,+0,82,+0,+0,82,+0,+0,29,29,+0,+0,+0,+0,82,+0,+0,82,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,25,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,96,96,96,96,96,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,79,+0,+0,+0,+0,25,+0,+0,+0,+0,+0,+0,+0,+0,+0,29,29,29,29,29,29,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,82,+0,+0,82,+0,+0,82,+0,+0,+0,+0,+0,+0,+0,+0,82,+0,+0,82,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,79,79,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,82,+0,+0,82,+0,+0,82,+0,+0,+4,+0,+0,+0,+0,+0,82,+0,+0,82,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,80,+0,80,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+4,74,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,23,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+4,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,94,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,94,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+5,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,96,96,96,96,96,96,96,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,96,96,96,96,96,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0],
[+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0]
]

# WORLD_MAP = [
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# ]

STORAGE_LOOT_LIST_TIER_1 = [
[[2, 10, 1, 5, 1, 3, 4, 0, 0], [0, 7, 0, 0, 9, 0, 0, 0, 0]],
[[6, 0, 0, 7, 3, 0, 0, 0, 0], [1, 1, 8, 10, 2, 0, 0, 0, 3]],
[[2, 5, 0, 0, 0, 0, 2, 1, 3], [6, 7, 9, 0, 0, 0, 0, 0, 10]]
]

STORAGE_LOOT_LIST_COUNT_TIER_1 = [
[[1, 10, 2, 2, 3, 1, 1, 0, 0], [0, 2, 0, 0, 1, 0, 0, 0, 0]],
[[2, 0, 0, 1, 1, 0, 0, 0, 0], [2, 1, 1, 7, 2, 0, 0, 0, 1]],
[[1, 1, 0, 0, 0, 0, 2, 2, 1], [1, 1, 1, 0, 0, 0, 0, 0, 8]]
]

STORAGE_LOOT_LIST_TIER_2 = [
[[10, 11, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 4, 0, 0, 0, 0]],
[[12, 10, 0, 0, 0, 0, 0, 0, 10], [0, 0, 0, 0, 0, 0, 2, 1, 0]]
]

STORAGE_LOOT_LIST_COUNT_TIER_2 = [
[[10, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 1, 0, 0, 0, 0]],
[[1, 12, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 1, 0]]
]

FOOD_LIST = [1, 2, 3, 4, 5, 6, 7, 8, 9]
FOOD_REGEN_DICT = {'beef': 30, 'calamari': 40, 'fish': 30, 'honey': 30, 'noodle': 36, 'shrimp': 40, 'sushi': 25, 'sushi2': 25, 'yakitori': 50}
FOOD_SATURATION = {'beef': 40, 'calamari': 60, 'fish': 50, 'honey': 60, 'noodle': 28*2, 'shrimp': 35*2, 'sushi': 18*2, 'sushi2': 18*2, 'yakitori': 35*2}

WEAPON_DAMAGE = {'sword': 50, 'axe': 150, 'lance': 80, 'rapier': 75, 'sai': 90}

def import_folder(path):
    surface_list = []

    for _, __, img_files in walk(path):
        for image in img_files:
            full_path = path + '/' + image
            image_surf = pygame.image.load(full_path).convert_alpha()
            surface_list.append(image_surf)
    return surface_list

font = pygame.font.Font(None, 30)

def debug(info, x=50, y=50):
    display_surface = pygame.display.get_surface()
    debug_surf = font.render(str(info), True, "Black")
    debug_rect = debug_surf.get_rect(topleft = (x, y))
    pygame.draw.rect(display_surface, "White", debug_rect)
    display_surface.blit(debug_surf, debug_rect)

# def import_csv_layout(path):
#     terrain_map = []
#     with open(path) as level_map:
#         layout = reader(level_map, delimiter = ',')
#         for row in layout:
#             terrain_map.append(list(row))
#         return terrain_map
